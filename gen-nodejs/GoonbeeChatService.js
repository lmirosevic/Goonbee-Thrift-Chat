//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var GoonbeeSharedThriftService_ttypes = require('./GoonbeeSharedThriftService_types')


var GoonbeeSharedThriftService = require('./GoonbeeSharedThriftService')
var GoonbeeSharedThriftServiceClient = GoonbeeSharedThriftService.Client
var GoonbeeSharedThriftServiceProcessor = GoonbeeSharedThriftService.Processor
var ttypes = require('./GoonbeeChatService_types');
//HELPER FUNCTIONS AND STRUCTURES

GBChatService.GoonbeeChatService_isUsernameAvailable_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
GBChatService.GoonbeeChatService_isUsernameAvailable_args.prototype = {};
GBChatService.GoonbeeChatService_isUsernameAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_isUsernameAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_isUsernameAvailable_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_isUsernameAvailable_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_isUsernameAvailable_result.prototype = {};
GBChatService.GoonbeeChatService_isUsernameAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_isUsernameAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_isUsernameAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_registerUsername_args = function(args) {
  this.userId = null;
  this.username = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
GBChatService.GoonbeeChatService_registerUsername_args.prototype = {};
GBChatService.GoonbeeChatService_registerUsername_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_registerUsername_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_registerUsername_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_registerUsername_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_registerUsername_result.prototype = {};
GBChatService.GoonbeeChatService_registerUsername_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_registerUsername_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_registerUsername_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newChat_args = function(args) {
  this.userId = null;
  this.chatId = null;
  this.chatOptions = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chatId !== undefined) {
      this.chatId = args.chatId;
    }
    if (args.chatOptions !== undefined) {
      this.chatOptions = args.chatOptions;
    }
  }
};
GBChatService.GoonbeeChatService_newChat_args.prototype = {};
GBChatService.GoonbeeChatService_newChat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.chatOptions = new ttypes.ChatOptions();
        this.chatOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newChat_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_newChat_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.chatOptions !== null && this.chatOptions !== undefined) {
    output.writeFieldBegin('chatOptions', Thrift.Type.STRUCT, 3);
    this.chatOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newChat_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_newChat_result.prototype = {};
GBChatService.GoonbeeChatService_newChat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Chat();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newChat_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_newChat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chats_args = function(args) {
  this.sorting = null;
  this.range = null;
  if (args) {
    if (args.sorting !== undefined) {
      this.sorting = args.sorting;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
  }
};
GBChatService.GoonbeeChatService_chats_args.prototype = {};
GBChatService.GoonbeeChatService_chats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sorting = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.Range();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chats_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_chats_args');
  if (this.sorting !== null && this.sorting !== undefined) {
    output.writeFieldBegin('sorting', Thrift.Type.I32, 1);
    output.writeI32(this.sorting);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chats_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_chats_result.prototype = {};
GBChatService.GoonbeeChatService_chats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Chat();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chats_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_chats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chat_args = function(args) {
  this.userId = null;
  this.chatId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chatId !== undefined) {
      this.chatId = args.chatId;
    }
  }
};
GBChatService.GoonbeeChatService_chat_args.prototype = {};
GBChatService.GoonbeeChatService_chat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chat_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_chat_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chat_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_chat_result.prototype = {};
GBChatService.GoonbeeChatService_chat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Chat();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_chat_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_chat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newMessage_args = function(args) {
  this.userId = null;
  this.chatId = null;
  this.content = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chatId !== undefined) {
      this.chatId = args.chatId;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
GBChatService.GoonbeeChatService_newMessage_args.prototype = {};
GBChatService.GoonbeeChatService_newMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newMessage_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_newMessage_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newMessage_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_newMessage_result.prototype = {};
GBChatService.GoonbeeChatService_newMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_newMessage_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_newMessage_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_messages_args = function(args) {
  this.userId = null;
  this.chatId = null;
  this.range = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chatId !== undefined) {
      this.chatId = args.chatId;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
  }
};
GBChatService.GoonbeeChatService_messages_args.prototype = {};
GBChatService.GoonbeeChatService_messages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.Range();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_messages_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_messages_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 3);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_messages_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_messages_result.prototype = {};
GBChatService.GoonbeeChatService_messages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Message();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_messages_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_messages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_setChatOptions_args = function(args) {
  this.userId = null;
  this.chatId = null;
  this.chatOptions = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.chatId !== undefined) {
      this.chatId = args.chatId;
    }
    if (args.chatOptions !== undefined) {
      this.chatOptions = args.chatOptions;
    }
  }
};
GBChatService.GoonbeeChatService_setChatOptions_args.prototype = {};
GBChatService.GoonbeeChatService_setChatOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.chatOptions = new ttypes.ChatOptions();
        this.chatOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_setChatOptions_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_setChatOptions_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.chatOptions !== null && this.chatOptions !== undefined) {
    output.writeFieldBegin('chatOptions', Thrift.Type.STRUCT, 3);
    this.chatOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_setChatOptions_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_setChatOptions_result.prototype = {};
GBChatService.GoonbeeChatService_setChatOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Chat();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_setChatOptions_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_setChatOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_globalUserCount_args = function(args) {
};
GBChatService.GoonbeeChatService_globalUserCount_args.prototype = {};
GBChatService.GoonbeeChatService_globalUserCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_globalUserCount_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_globalUserCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatService_globalUserCount_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof ttypes.RequestError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
GBChatService.GoonbeeChatService_globalUserCount_result.prototype = {};
GBChatService.GoonbeeChatService_globalUserCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.RequestError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBChatService.GoonbeeChatService_globalUserCount_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeeChatService_globalUserCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBChatService.GoonbeeChatServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(GBChatService.GoonbeeChatServiceClient, GoonbeeSharedThriftServiceClient)
GBChatService.GoonbeeChatServiceClient.prototype.isUsernameAvailable = function(username, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_isUsernameAvailable(username);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_isUsernameAvailable = function(username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isUsernameAvailable', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_isUsernameAvailable_args();
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_isUsernameAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_isUsernameAvailable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isUsernameAvailable failed: unknown result');
};
GBChatService.GoonbeeChatServiceClient.prototype.registerUsername = function(userId, username, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_registerUsername(userId, username);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_registerUsername = function(userId, username) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerUsername', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_registerUsername_args();
  args.userId = userId;
  args.username = username;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_registerUsername = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_registerUsername_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerUsername failed: unknown result');
};
GBChatService.GoonbeeChatServiceClient.prototype.newChat = function(userId, chatId, chatOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_newChat(userId, chatId, chatOptions);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_newChat = function(userId, chatId, chatOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newChat', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_newChat_args();
  args.userId = userId;
  args.chatId = chatId;
  args.chatOptions = chatOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_newChat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_newChat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('newChat failed: unknown result');
};
GBChatService.GoonbeeChatServiceClient.prototype.chats = function(sorting, range, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_chats(sorting, range);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_chats = function(sorting, range) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chats', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_chats_args();
  args.sorting = sorting;
  args.range = range;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_chats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_chats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('chats failed: unknown result');
};
GBChatService.GoonbeeChatServiceClient.prototype.chat = function(userId, chatId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_chat(userId, chatId);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_chat = function(userId, chatId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chat', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_chat_args();
  args.userId = userId;
  args.chatId = chatId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_chat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_chat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('chat failed: unknown result');
};
GBChatService.GoonbeeChatServiceClient.prototype.newMessage = function(userId, chatId, content, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_newMessage(userId, chatId, content);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_newMessage = function(userId, chatId, content) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('newMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_newMessage_args();
  args.userId = userId;
  args.chatId = chatId;
  args.content = content;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_newMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_newMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null)
};
GBChatService.GoonbeeChatServiceClient.prototype.messages = function(userId, chatId, range, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_messages(userId, chatId, range);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_messages = function(userId, chatId, range) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('messages', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_messages_args();
  args.userId = userId;
  args.chatId = chatId;
  args.range = range;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_messages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_messages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('messages failed: unknown result');
};
GBChatService.GoonbeeChatServiceClient.prototype.setChatOptions = function(userId, chatId, chatOptions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setChatOptions(userId, chatId, chatOptions);
};

GBChatService.GoonbeeChatServiceClient.prototype.send_setChatOptions = function(userId, chatId, chatOptions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setChatOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_setChatOptions_args();
  args.userId = userId;
  args.chatId = chatId;
  args.chatOptions = chatOptions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_setChatOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_setChatOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setChatOptions failed: unknown result');
};
GBChatService.GoonbeeChatServiceClient.prototype.globalUserCount = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_globalUserCount();
};

GBChatService.GoonbeeChatServiceClient.prototype.send_globalUserCount = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('globalUserCount', Thrift.MessageType.CALL, this.seqid);
  var args = new GBChatService.GoonbeeChatService_globalUserCount_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBChatService.GoonbeeChatServiceClient.prototype.recv_globalUserCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBChatService.GoonbeeChatService_globalUserCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('globalUserCount failed: unknown result');
};
GBChatService.GoonbeeChatServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(GBChatService.GoonbeeChatServiceProcessor, GoonbeeSharedThriftServiceProcessor)
GBChatService.GoonbeeChatServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_isUsernameAvailable = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_isUsernameAvailable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.isUsernameAvailable(args.username, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_isUsernameAvailable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("isUsernameAvailable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_registerUsername = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_registerUsername_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.registerUsername(args.userId, args.username, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_registerUsername_result((err != null ? err : {success: result}));
    output.writeMessageBegin("registerUsername", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_newChat = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_newChat_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.newChat(args.userId, args.chatId, args.chatOptions, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_newChat_result((err != null ? err : {success: result}));
    output.writeMessageBegin("newChat", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_chats = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_chats_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.chats(args.sorting, args.range, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_chats_result((err != null ? err : {success: result}));
    output.writeMessageBegin("chats", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_chat = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_chat_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.chat(args.userId, args.chatId, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_chat_result((err != null ? err : {success: result}));
    output.writeMessageBegin("chat", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_newMessage = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_newMessage_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.newMessage(args.userId, args.chatId, args.content, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_newMessage_result((err != null ? err : {success: result}));
    output.writeMessageBegin("newMessage", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_messages = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_messages_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.messages(args.userId, args.chatId, args.range, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_messages_result((err != null ? err : {success: result}));
    output.writeMessageBegin("messages", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_setChatOptions = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_setChatOptions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setChatOptions(args.userId, args.chatId, args.chatOptions, function (err, result) {
    var result = new GBChatService.GoonbeeChatService_setChatOptions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setChatOptions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBChatService.GoonbeeChatServiceProcessor.prototype.process_globalUserCount = function(seqid, input, output) {
  var args = new GBChatService.GoonbeeChatService_globalUserCount_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.globalUserCount(function (err, result) {
    var result = new GBChatService.GoonbeeChatService_globalUserCount_result((err != null ? err : {success: result}));
    output.writeMessageBegin("globalUserCount", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

