/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "GoonbeeSharedThriftService.h"

#import "GoonbeeChatService.h"

@implementation GBChatRange

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDirection: (int) direction index: (int32_t) index length: (int32_t) length
{
  self = [super init];
  __direction = direction;
  __direction_isset = YES;
  __index = index;
  __index_isset = YES;
  __length = length;
  __length_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"direction"])
  {
    __direction = [decoder decodeIntForKey: @"direction"];
    __direction_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [decoder decodeInt32ForKey: @"index"];
    __index_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt32ForKey: @"length"];
    __length_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__direction_isset)
  {
    [encoder encodeInt: __direction forKey: @"direction"];
  }
  if (__index_isset)
  {
    [encoder encodeInt32: __index forKey: @"index"];
  }
  if (__length_isset)
  {
    [encoder encodeInt32: __length forKey: @"length"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) direction {
  return __direction;
}

- (void) setDirection: (int) direction {
  __direction = direction;
  __direction_isset = YES;
}

- (BOOL) directionIsSet {
  return __direction_isset;
}

- (void) unsetDirection {
  __direction_isset = NO;
}

- (int32_t) index {
  return __index;
}

- (void) setIndex: (int32_t) index {
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  __index_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setDirection: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Range"];
  if (__direction_isset) {
    [outProtocol writeFieldBeginWithName: @"direction" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __direction];
    [outProtocol writeFieldEnd];
  }
  if (__index_isset) {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __index];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Range("];
  [ms appendString: @"direction:"];
  [ms appendFormat: @"%i", __direction];
  [ms appendString: @",index:"];
  [ms appendFormat: @"%i", __index];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBChatChatStats

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessageCount: (int32_t) messageCount participantCount: (int32_t) participantCount
{
  self = [super init];
  __messageCount = messageCount;
  __messageCount_isset = YES;
  __participantCount = participantCount;
  __participantCount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messageCount"])
  {
    __messageCount = [decoder decodeInt32ForKey: @"messageCount"];
    __messageCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"participantCount"])
  {
    __participantCount = [decoder decodeInt32ForKey: @"participantCount"];
    __participantCount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messageCount_isset)
  {
    [encoder encodeInt32: __messageCount forKey: @"messageCount"];
  }
  if (__participantCount_isset)
  {
    [encoder encodeInt32: __participantCount forKey: @"participantCount"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) messageCount {
  return __messageCount;
}

- (void) setMessageCount: (int32_t) messageCount {
  __messageCount = messageCount;
  __messageCount_isset = YES;
}

- (BOOL) messageCountIsSet {
  return __messageCount_isset;
}

- (void) unsetMessageCount {
  __messageCount_isset = NO;
}

- (int32_t) participantCount {
  return __participantCount;
}

- (void) setParticipantCount: (int32_t) participantCount {
  __participantCount = participantCount;
  __participantCount_isset = YES;
}

- (BOOL) participantCountIsSet {
  return __participantCount_isset;
}

- (void) unsetParticipantCount {
  __participantCount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMessageCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setParticipantCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChatStats"];
  if (__messageCount_isset) {
    [outProtocol writeFieldBeginWithName: @"messageCount" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __messageCount];
    [outProtocol writeFieldEnd];
  }
  if (__participantCount_isset) {
    [outProtocol writeFieldBeginWithName: @"participantCount" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __participantCount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatStats("];
  [ms appendString: @"messageCount:"];
  [ms appendFormat: @"%i", __messageCount];
  [ms appendString: @",participantCount:"];
  [ms appendFormat: @"%i", __participantCount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBChatChatMeta

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOwnerId: (NSString *) ownerId dateCreated: (NSString *) dateCreated name: (NSString *) name topic: (NSString *) topic
{
  self = [super init];
  __ownerId = [ownerId retain_stub];
  __ownerId_isset = YES;
  __dateCreated = [dateCreated retain_stub];
  __dateCreated_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __topic = [topic retain_stub];
  __topic_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ownerId"])
  {
    __ownerId = [[decoder decodeObjectForKey: @"ownerId"] retain_stub];
    __ownerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"dateCreated"])
  {
    __dateCreated = [[decoder decodeObjectForKey: @"dateCreated"] retain_stub];
    __dateCreated_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"topic"])
  {
    __topic = [[decoder decodeObjectForKey: @"topic"] retain_stub];
    __topic_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ownerId_isset)
  {
    [encoder encodeObject: __ownerId forKey: @"ownerId"];
  }
  if (__dateCreated_isset)
  {
    [encoder encodeObject: __dateCreated forKey: @"dateCreated"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__topic_isset)
  {
    [encoder encodeObject: __topic forKey: @"topic"];
  }
}

- (void) dealloc
{
  [__ownerId release_stub];
  [__dateCreated release_stub];
  [__name release_stub];
  [__topic release_stub];
  [super dealloc_stub];
}

- (NSString *) ownerId {
  return [[__ownerId retain_stub] autorelease_stub];
}

- (void) setOwnerId: (NSString *) ownerId {
  [ownerId retain_stub];
  [__ownerId release_stub];
  __ownerId = ownerId;
  __ownerId_isset = YES;
}

- (BOOL) ownerIdIsSet {
  return __ownerId_isset;
}

- (void) unsetOwnerId {
  [__ownerId release_stub];
  __ownerId = nil;
  __ownerId_isset = NO;
}

- (NSString *) dateCreated {
  return [[__dateCreated retain_stub] autorelease_stub];
}

- (void) setDateCreated: (NSString *) dateCreated {
  [dateCreated retain_stub];
  [__dateCreated release_stub];
  __dateCreated = dateCreated;
  __dateCreated_isset = YES;
}

- (BOOL) dateCreatedIsSet {
  return __dateCreated_isset;
}

- (void) unsetDateCreated {
  [__dateCreated release_stub];
  __dateCreated = nil;
  __dateCreated_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) topic {
  return [[__topic retain_stub] autorelease_stub];
}

- (void) setTopic: (NSString *) topic {
  [topic retain_stub];
  [__topic release_stub];
  __topic = topic;
  __topic_isset = YES;
}

- (BOOL) topicIsSet {
  return __topic_isset;
}

- (void) unsetTopic {
  [__topic release_stub];
  __topic = nil;
  __topic_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwnerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDateCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTopic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChatMeta"];
  if (__ownerId_isset) {
    if (__ownerId != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __ownerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dateCreated_isset) {
    if (__dateCreated != nil) {
      [outProtocol writeFieldBeginWithName: @"dateCreated" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __dateCreated];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__topic_isset) {
    if (__topic != nil) {
      [outProtocol writeFieldBeginWithName: @"topic" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __topic];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatMeta("];
  [ms appendString: @"ownerId:"];
  [ms appendFormat: @"\"%@\"", __ownerId];
  [ms appendString: @",dateCreated:"];
  [ms appendFormat: @"\"%@\"", __dateCreated];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",topic:"];
  [ms appendFormat: @"\"%@\"", __topic];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBChatChatOptions

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name topic: (NSString *) topic
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __topic = [topic retain_stub];
  __topic_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"topic"])
  {
    __topic = [[decoder decodeObjectForKey: @"topic"] retain_stub];
    __topic_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__topic_isset)
  {
    [encoder encodeObject: __topic forKey: @"topic"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__topic release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) topic {
  return [[__topic retain_stub] autorelease_stub];
}

- (void) setTopic: (NSString *) topic {
  [topic retain_stub];
  [__topic release_stub];
  __topic = topic;
  __topic_isset = YES;
}

- (BOOL) topicIsSet {
  return __topic_isset;
}

- (void) unsetTopic {
  [__topic release_stub];
  __topic = nil;
  __topic_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTopic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChatOptions"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__topic_isset) {
    if (__topic != nil) {
      [outProtocol writeFieldBeginWithName: @"topic" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __topic];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChatOptions("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",topic:"];
  [ms appendFormat: @"\"%@\"", __topic];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBChatChat

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id meta: (GBChatChatMeta *) meta stats: (GBChatChatStats *) stats
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __meta = [meta retain_stub];
  __meta_isset = YES;
  __stats = [stats retain_stub];
  __stats_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"meta"])
  {
    __meta = [[decoder decodeObjectForKey: @"meta"] retain_stub];
    __meta_isset = YES;
  }
  if ([decoder containsValueForKey: @"stats"])
  {
    __stats = [[decoder decodeObjectForKey: @"stats"] retain_stub];
    __stats_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__meta_isset)
  {
    [encoder encodeObject: __meta forKey: @"meta"];
  }
  if (__stats_isset)
  {
    [encoder encodeObject: __stats forKey: @"stats"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__meta release_stub];
  [__stats release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (GBChatChatMeta *) meta {
  return [[__meta retain_stub] autorelease_stub];
}

- (void) setMeta: (GBChatChatMeta *) meta {
  [meta retain_stub];
  [__meta release_stub];
  __meta = meta;
  __meta_isset = YES;
}

- (BOOL) metaIsSet {
  return __meta_isset;
}

- (void) unsetMeta {
  [__meta release_stub];
  __meta = nil;
  __meta_isset = NO;
}

- (GBChatChatStats *) stats {
  return [[__stats retain_stub] autorelease_stub];
}

- (void) setStats: (GBChatChatStats *) stats {
  [stats retain_stub];
  [__stats release_stub];
  __stats = stats;
  __stats_isset = YES;
}

- (BOOL) statsIsSet {
  return __stats_isset;
}

- (void) unsetStats {
  [__stats release_stub];
  __stats = nil;
  __stats_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          GBChatChatMeta *fieldValue = [[GBChatChatMeta alloc] init];
          [fieldValue read: inProtocol];
          [self setMeta: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          GBChatChatStats *fieldValue = [[GBChatChatStats alloc] init];
          [fieldValue read: inProtocol];
          [self setStats: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Chat"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__meta_isset) {
    if (__meta != nil) {
      [outProtocol writeFieldBeginWithName: @"meta" type: TType_STRUCT fieldID: 2];
      [__meta write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stats_isset) {
    if (__stats != nil) {
      [outProtocol writeFieldBeginWithName: @"stats" type: TType_STRUCT fieldID: 3];
      [__stats write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Chat("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",meta:"];
  [ms appendFormat: @"%@", __meta];
  [ms appendString: @",stats:"];
  [ms appendFormat: @"%@", __stats];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBChatMessage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSeq: (int32_t) seq dateCreated: (NSString *) dateCreated authorName: (NSString *) authorName content: (NSString *) content
{
  self = [super init];
  __seq = seq;
  __seq_isset = YES;
  __dateCreated = [dateCreated retain_stub];
  __dateCreated_isset = YES;
  __authorName = [authorName retain_stub];
  __authorName_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"seq"])
  {
    __seq = [decoder decodeInt32ForKey: @"seq"];
    __seq_isset = YES;
  }
  if ([decoder containsValueForKey: @"dateCreated"])
  {
    __dateCreated = [[decoder decodeObjectForKey: @"dateCreated"] retain_stub];
    __dateCreated_isset = YES;
  }
  if ([decoder containsValueForKey: @"authorName"])
  {
    __authorName = [[decoder decodeObjectForKey: @"authorName"] retain_stub];
    __authorName_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__seq_isset)
  {
    [encoder encodeInt32: __seq forKey: @"seq"];
  }
  if (__dateCreated_isset)
  {
    [encoder encodeObject: __dateCreated forKey: @"dateCreated"];
  }
  if (__authorName_isset)
  {
    [encoder encodeObject: __authorName forKey: @"authorName"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__dateCreated release_stub];
  [__authorName release_stub];
  [__content release_stub];
  [super dealloc_stub];
}

- (int32_t) seq {
  return __seq;
}

- (void) setSeq: (int32_t) seq {
  __seq = seq;
  __seq_isset = YES;
}

- (BOOL) seqIsSet {
  return __seq_isset;
}

- (void) unsetSeq {
  __seq_isset = NO;
}

- (NSString *) dateCreated {
  return [[__dateCreated retain_stub] autorelease_stub];
}

- (void) setDateCreated: (NSString *) dateCreated {
  [dateCreated retain_stub];
  [__dateCreated release_stub];
  __dateCreated = dateCreated;
  __dateCreated_isset = YES;
}

- (BOOL) dateCreatedIsSet {
  return __dateCreated_isset;
}

- (void) unsetDateCreated {
  [__dateCreated release_stub];
  __dateCreated = nil;
  __dateCreated_isset = NO;
}

- (NSString *) authorName {
  return [[__authorName retain_stub] autorelease_stub];
}

- (void) setAuthorName: (NSString *) authorName {
  [authorName retain_stub];
  [__authorName release_stub];
  __authorName = authorName;
  __authorName_isset = YES;
}

- (BOOL) authorNameIsSet {
  return __authorName_isset;
}

- (void) unsetAuthorName {
  [__authorName release_stub];
  __authorName = nil;
  __authorName_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSeq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDateCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthorName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Message"];
  if (__seq_isset) {
    [outProtocol writeFieldBeginWithName: @"seq" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __seq];
    [outProtocol writeFieldEnd];
  }
  if (__dateCreated_isset) {
    if (__dateCreated != nil) {
      [outProtocol writeFieldBeginWithName: @"dateCreated" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __dateCreated];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authorName_isset) {
    if (__authorName != nil) {
      [outProtocol writeFieldBeginWithName: @"authorName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __authorName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Message("];
  [ms appendString: @"seq:"];
  [ms appendFormat: @"%i", __seq];
  [ms appendString: @",dateCreated:"];
  [ms appendFormat: @"\"%@\"", __dateCreated];
  [ms appendString: @",authorName:"];
  [ms appendFormat: @"\"%@\"", __authorName];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBChatRequestError

- (id) init
{
  return [super initWithName: @"RequestError" reason: @"unknown" userInfo: nil];
}

- (id) initWithStatus: (int) status message: (NSString *) message
{
  self = [self init];
  __status = status;
  __status_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestError"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestError("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation GBChatGoonbeeChatServiceConstants
+ (void) initialize {
}
@end

@interface GBChatisUsernameAvailable_args : NSObject <TBase, NSCoding> {
  NSString * __username;

  BOOL __username_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
#endif

- (id) init;
- (id) initWithUsername: (NSString *) username;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) username;
- (void) setUsername: (NSString *) username;
#endif
- (BOOL) usernameIsSet;

@end

@implementation GBChatisUsernameAvailable_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUsername: (NSString *) username
{
  self = [super init];
  __username = [username retain_stub];
  __username_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
}

- (void) dealloc
{
  [__username release_stub];
  [super dealloc_stub];
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"isUsernameAvailable_args"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"isUsernameAvailable_args("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatIsUsernameAvailable_result : NSObject <TBase, NSCoding> {
  BOOL __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatIsUsernameAvailable_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsUsernameAvailable_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsUsernameAvailable_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatregisterUsername_args : NSObject <TBase, NSCoding> {
  NSString * __userId;
  NSString * __username;

  BOOL __userId_isset;
  BOOL __username_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
#endif

- (id) init;
- (id) initWithUserId: (NSString *) userId username: (NSString *) username;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) username;
- (void) setUsername: (NSString *) username;
#endif
- (BOOL) usernameIsSet;

@end

@implementation GBChatregisterUsername_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId username: (NSString *) username
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__username release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerUsername_args"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerUsername_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatRegisterUsername_result : NSObject <TBase, NSCoding> {
  NSString * __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatRegisterUsername_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterUsername_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterUsername_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatnewChat_args : NSObject <TBase, NSCoding> {
  NSString * __userId;
  NSString * __chatId;
  GBChatChatOptions * __chatOptions;

  BOOL __userId_isset;
  BOOL __chatId_isset;
  BOOL __chatOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=chatId, setter=setChatId:) NSString * chatId;
@property (nonatomic, retain, getter=chatOptions, setter=setChatOptions:) GBChatChatOptions * chatOptions;
#endif

- (id) init;
- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) chatId;
- (void) setChatId: (NSString *) chatId;
#endif
- (BOOL) chatIdIsSet;

#if !__has_feature(objc_arc)
- (GBChatChatOptions *) chatOptions;
- (void) setChatOptions: (GBChatChatOptions *) chatOptions;
#endif
- (BOOL) chatOptionsIsSet;

@end

@implementation GBChatnewChat_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __chatId = [chatId retain_stub];
  __chatId_isset = YES;
  __chatOptions = [chatOptions retain_stub];
  __chatOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chatId"])
  {
    __chatId = [[decoder decodeObjectForKey: @"chatId"] retain_stub];
    __chatId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chatOptions"])
  {
    __chatOptions = [[decoder decodeObjectForKey: @"chatOptions"] retain_stub];
    __chatOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__chatId_isset)
  {
    [encoder encodeObject: __chatId forKey: @"chatId"];
  }
  if (__chatOptions_isset)
  {
    [encoder encodeObject: __chatOptions forKey: @"chatOptions"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__chatId release_stub];
  [__chatOptions release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) chatId {
  return [[__chatId retain_stub] autorelease_stub];
}

- (void) setChatId: (NSString *) chatId {
  [chatId retain_stub];
  [__chatId release_stub];
  __chatId = chatId;
  __chatId_isset = YES;
}

- (BOOL) chatIdIsSet {
  return __chatId_isset;
}

- (void) unsetChatId {
  [__chatId release_stub];
  __chatId = nil;
  __chatId_isset = NO;
}

- (GBChatChatOptions *) chatOptions {
  return [[__chatOptions retain_stub] autorelease_stub];
}

- (void) setChatOptions: (GBChatChatOptions *) chatOptions {
  [chatOptions retain_stub];
  [__chatOptions release_stub];
  __chatOptions = chatOptions;
  __chatOptions_isset = YES;
}

- (BOOL) chatOptionsIsSet {
  return __chatOptions_isset;
}

- (void) unsetChatOptions {
  [__chatOptions release_stub];
  __chatOptions = nil;
  __chatOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChatId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          GBChatChatOptions *fieldValue = [[GBChatChatOptions alloc] init];
          [fieldValue read: inProtocol];
          [self setChatOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"newChat_args"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chatId_isset) {
    if (__chatId != nil) {
      [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __chatId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chatOptions_isset) {
    if (__chatOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"chatOptions" type: TType_STRUCT fieldID: 3];
      [__chatOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"newChat_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",chatId:"];
  [ms appendFormat: @"\"%@\"", __chatId];
  [ms appendString: @",chatOptions:"];
  [ms appendFormat: @"%@", __chatOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatNewChat_result : NSObject <TBase, NSCoding> {
  GBChatChat * __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GBChatChat * success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (GBChatChat *) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GBChatChat *) success;
- (void) setSuccess: (GBChatChat *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatNewChat_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GBChatChat *) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (GBChatChat *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GBChatChat *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GBChatChat *fieldValue = [[GBChatChat alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewChat_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewChat_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatchats_args : NSObject <TBase, NSCoding> {
  int __sorting;
  GBChatRange * __range;

  BOOL __sorting_isset;
  BOOL __range_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=sorting, setter=setSorting:) int sorting;
@property (nonatomic, retain, getter=range, setter=setRange:) GBChatRange * range;
#endif

- (id) init;
- (id) initWithSorting: (int) sorting range: (GBChatRange *) range;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) sorting;
- (void) setSorting: (int) sorting;
#endif
- (BOOL) sortingIsSet;

#if !__has_feature(objc_arc)
- (GBChatRange *) range;
- (void) setRange: (GBChatRange *) range;
#endif
- (BOOL) rangeIsSet;

@end

@implementation GBChatchats_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSorting: (int) sorting range: (GBChatRange *) range
{
  self = [super init];
  __sorting = sorting;
  __sorting_isset = YES;
  __range = [range retain_stub];
  __range_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sorting"])
  {
    __sorting = [decoder decodeIntForKey: @"sorting"];
    __sorting_isset = YES;
  }
  if ([decoder containsValueForKey: @"range"])
  {
    __range = [[decoder decodeObjectForKey: @"range"] retain_stub];
    __range_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sorting_isset)
  {
    [encoder encodeInt: __sorting forKey: @"sorting"];
  }
  if (__range_isset)
  {
    [encoder encodeObject: __range forKey: @"range"];
  }
}

- (void) dealloc
{
  [__range release_stub];
  [super dealloc_stub];
}

- (int) sorting {
  return __sorting;
}

- (void) setSorting: (int) sorting {
  __sorting = sorting;
  __sorting_isset = YES;
}

- (BOOL) sortingIsSet {
  return __sorting_isset;
}

- (void) unsetSorting {
  __sorting_isset = NO;
}

- (GBChatRange *) range {
  return [[__range retain_stub] autorelease_stub];
}

- (void) setRange: (GBChatRange *) range {
  [range retain_stub];
  [__range release_stub];
  __range = range;
  __range_isset = YES;
}

- (BOOL) rangeIsSet {
  return __range_isset;
}

- (void) unsetRange {
  [__range release_stub];
  __range = nil;
  __range_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSorting: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          GBChatRange *fieldValue = [[GBChatRange alloc] init];
          [fieldValue read: inProtocol];
          [self setRange: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"chats_args"];
  if (__sorting_isset) {
    [outProtocol writeFieldBeginWithName: @"sorting" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __sorting];
    [outProtocol writeFieldEnd];
  }
  if (__range_isset) {
    if (__range != nil) {
      [outProtocol writeFieldBeginWithName: @"range" type: TType_STRUCT fieldID: 2];
      [__range write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"chats_args("];
  [ms appendString: @"sorting:"];
  [ms appendFormat: @"%i", __sorting];
  [ms appendString: @",range:"];
  [ms appendFormat: @"%@", __range];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatChats_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatChats_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            GBChatChat *_elem2 = [[GBChatChat alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Chats_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Chats_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatchat_args : NSObject <TBase, NSCoding> {
  NSString * __userId;
  NSString * __chatId;

  BOOL __userId_isset;
  BOOL __chatId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=chatId, setter=setChatId:) NSString * chatId;
#endif

- (id) init;
- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) chatId;
- (void) setChatId: (NSString *) chatId;
#endif
- (BOOL) chatIdIsSet;

@end

@implementation GBChatchat_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __chatId = [chatId retain_stub];
  __chatId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chatId"])
  {
    __chatId = [[decoder decodeObjectForKey: @"chatId"] retain_stub];
    __chatId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__chatId_isset)
  {
    [encoder encodeObject: __chatId forKey: @"chatId"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__chatId release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) chatId {
  return [[__chatId retain_stub] autorelease_stub];
}

- (void) setChatId: (NSString *) chatId {
  [chatId retain_stub];
  [__chatId release_stub];
  __chatId = chatId;
  __chatId_isset = YES;
}

- (BOOL) chatIdIsSet {
  return __chatId_isset;
}

- (void) unsetChatId {
  [__chatId release_stub];
  __chatId = nil;
  __chatId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChatId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"chat_args"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chatId_isset) {
    if (__chatId != nil) {
      [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __chatId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"chat_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",chatId:"];
  [ms appendFormat: @"\"%@\"", __chatId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatChat_result : NSObject <TBase, NSCoding> {
  GBChatChat * __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GBChatChat * success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (GBChatChat *) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GBChatChat *) success;
- (void) setSuccess: (GBChatChat *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatChat_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GBChatChat *) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (GBChatChat *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GBChatChat *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GBChatChat *fieldValue = [[GBChatChat alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Chat_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Chat_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatnewMessage_args : NSObject <TBase, NSCoding> {
  NSString * __userId;
  NSString * __chatId;
  NSString * __content;

  BOOL __userId_isset;
  BOOL __chatId_isset;
  BOOL __content_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=chatId, setter=setChatId:) NSString * chatId;
@property (nonatomic, retain, getter=content, setter=setContent:) NSString * content;
#endif

- (id) init;
- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId content: (NSString *) content;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) chatId;
- (void) setChatId: (NSString *) chatId;
#endif
- (BOOL) chatIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) content;
- (void) setContent: (NSString *) content;
#endif
- (BOOL) contentIsSet;

@end

@implementation GBChatnewMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId content: (NSString *) content
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __chatId = [chatId retain_stub];
  __chatId_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chatId"])
  {
    __chatId = [[decoder decodeObjectForKey: @"chatId"] retain_stub];
    __chatId_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__chatId_isset)
  {
    [encoder encodeObject: __chatId forKey: @"chatId"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__chatId release_stub];
  [__content release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) chatId {
  return [[__chatId retain_stub] autorelease_stub];
}

- (void) setChatId: (NSString *) chatId {
  [chatId retain_stub];
  [__chatId release_stub];
  __chatId = chatId;
  __chatId_isset = YES;
}

- (BOOL) chatIdIsSet {
  return __chatId_isset;
}

- (void) unsetChatId {
  [__chatId release_stub];
  __chatId = nil;
  __chatId_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChatId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"newMessage_args"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chatId_isset) {
    if (__chatId != nil) {
      [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __chatId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"newMessage_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",chatId:"];
  [ms appendFormat: @"\"%@\"", __chatId];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatNewMessage_result : NSObject <TBase, NSCoding> {
  GBChatRequestError * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithError: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatNewMessage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (GBChatRequestError *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewMessage_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewMessage_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatmessages_args : NSObject <TBase, NSCoding> {
  NSString * __userId;
  NSString * __chatId;
  GBChatRange * __range;

  BOOL __userId_isset;
  BOOL __chatId_isset;
  BOOL __range_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=chatId, setter=setChatId:) NSString * chatId;
@property (nonatomic, retain, getter=range, setter=setRange:) GBChatRange * range;
#endif

- (id) init;
- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId range: (GBChatRange *) range;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) chatId;
- (void) setChatId: (NSString *) chatId;
#endif
- (BOOL) chatIdIsSet;

#if !__has_feature(objc_arc)
- (GBChatRange *) range;
- (void) setRange: (GBChatRange *) range;
#endif
- (BOOL) rangeIsSet;

@end

@implementation GBChatmessages_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId range: (GBChatRange *) range
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __chatId = [chatId retain_stub];
  __chatId_isset = YES;
  __range = [range retain_stub];
  __range_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chatId"])
  {
    __chatId = [[decoder decodeObjectForKey: @"chatId"] retain_stub];
    __chatId_isset = YES;
  }
  if ([decoder containsValueForKey: @"range"])
  {
    __range = [[decoder decodeObjectForKey: @"range"] retain_stub];
    __range_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__chatId_isset)
  {
    [encoder encodeObject: __chatId forKey: @"chatId"];
  }
  if (__range_isset)
  {
    [encoder encodeObject: __range forKey: @"range"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__chatId release_stub];
  [__range release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) chatId {
  return [[__chatId retain_stub] autorelease_stub];
}

- (void) setChatId: (NSString *) chatId {
  [chatId retain_stub];
  [__chatId release_stub];
  __chatId = chatId;
  __chatId_isset = YES;
}

- (BOOL) chatIdIsSet {
  return __chatId_isset;
}

- (void) unsetChatId {
  [__chatId release_stub];
  __chatId = nil;
  __chatId_isset = NO;
}

- (GBChatRange *) range {
  return [[__range retain_stub] autorelease_stub];
}

- (void) setRange: (GBChatRange *) range {
  [range retain_stub];
  [__range release_stub];
  __range = range;
  __range_isset = YES;
}

- (BOOL) rangeIsSet {
  return __range_isset;
}

- (void) unsetRange {
  [__range release_stub];
  __range = nil;
  __range_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChatId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          GBChatRange *fieldValue = [[GBChatRange alloc] init];
          [fieldValue read: inProtocol];
          [self setRange: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"messages_args"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chatId_isset) {
    if (__chatId != nil) {
      [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __chatId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__range_isset) {
    if (__range != nil) {
      [outProtocol writeFieldBeginWithName: @"range" type: TType_STRUCT fieldID: 3];
      [__range write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"messages_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",chatId:"];
  [ms appendFormat: @"\"%@\"", __chatId];
  [ms appendString: @",range:"];
  [ms appendFormat: @"%@", __range];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatMessages_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatMessages_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            GBChatMessage *_elem7 = [[GBChatMessage alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Messages_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Messages_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatsetChatOptions_args : NSObject <TBase, NSCoding> {
  NSString * __userId;
  NSString * __chatId;
  GBChatChatOptions * __chatOptions;

  BOOL __userId_isset;
  BOOL __chatId_isset;
  BOOL __chatOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=chatId, setter=setChatId:) NSString * chatId;
@property (nonatomic, retain, getter=chatOptions, setter=setChatOptions:) GBChatChatOptions * chatOptions;
#endif

- (id) init;
- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) chatId;
- (void) setChatId: (NSString *) chatId;
#endif
- (BOOL) chatIdIsSet;

#if !__has_feature(objc_arc)
- (GBChatChatOptions *) chatOptions;
- (void) setChatOptions: (GBChatChatOptions *) chatOptions;
#endif
- (BOOL) chatOptionsIsSet;

@end

@implementation GBChatsetChatOptions_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __chatId = [chatId retain_stub];
  __chatId_isset = YES;
  __chatOptions = [chatOptions retain_stub];
  __chatOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chatId"])
  {
    __chatId = [[decoder decodeObjectForKey: @"chatId"] retain_stub];
    __chatId_isset = YES;
  }
  if ([decoder containsValueForKey: @"chatOptions"])
  {
    __chatOptions = [[decoder decodeObjectForKey: @"chatOptions"] retain_stub];
    __chatOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__chatId_isset)
  {
    [encoder encodeObject: __chatId forKey: @"chatId"];
  }
  if (__chatOptions_isset)
  {
    [encoder encodeObject: __chatOptions forKey: @"chatOptions"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__chatId release_stub];
  [__chatOptions release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) chatId {
  return [[__chatId retain_stub] autorelease_stub];
}

- (void) setChatId: (NSString *) chatId {
  [chatId retain_stub];
  [__chatId release_stub];
  __chatId = chatId;
  __chatId_isset = YES;
}

- (BOOL) chatIdIsSet {
  return __chatId_isset;
}

- (void) unsetChatId {
  [__chatId release_stub];
  __chatId = nil;
  __chatId_isset = NO;
}

- (GBChatChatOptions *) chatOptions {
  return [[__chatOptions retain_stub] autorelease_stub];
}

- (void) setChatOptions: (GBChatChatOptions *) chatOptions {
  [chatOptions retain_stub];
  [__chatOptions release_stub];
  __chatOptions = chatOptions;
  __chatOptions_isset = YES;
}

- (BOOL) chatOptionsIsSet {
  return __chatOptions_isset;
}

- (void) unsetChatOptions {
  [__chatOptions release_stub];
  __chatOptions = nil;
  __chatOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChatId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          GBChatChatOptions *fieldValue = [[GBChatChatOptions alloc] init];
          [fieldValue read: inProtocol];
          [self setChatOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setChatOptions_args"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chatId_isset) {
    if (__chatId != nil) {
      [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __chatId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__chatOptions_isset) {
    if (__chatOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"chatOptions" type: TType_STRUCT fieldID: 3];
      [__chatOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setChatOptions_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",chatId:"];
  [ms appendFormat: @"\"%@\"", __chatId];
  [ms appendString: @",chatOptions:"];
  [ms appendFormat: @"%@", __chatOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatSetChatOptions_result : NSObject <TBase, NSCoding> {
  GBChatChat * __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GBChatChat * success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (GBChatChat *) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GBChatChat *) success;
- (void) setSuccess: (GBChatChat *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatSetChatOptions_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GBChatChat *) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (GBChatChat *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GBChatChat *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GBChatChat *fieldValue = [[GBChatChat alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetChatOptions_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetChatOptions_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatglobalUserCount_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation GBChatglobalUserCount_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"globalUserCount_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"globalUserCount_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBChatGlobalUserCount_result : NSObject <TBase, NSCoding> {
  int32_t __success;
  GBChatRequestError * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
@property (nonatomic, retain, getter=error, setter=setError:) GBChatRequestError * error;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success error: (GBChatRequestError *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (GBChatRequestError *) error;
- (void) setError: (GBChatRequestError *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GBChatGlobalUserCount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success error: (GBChatRequestError *) error
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (GBChatRequestError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (GBChatRequestError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          GBChatRequestError *fieldValue = [[GBChatRequestError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GlobalUserCount_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GlobalUserCount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBChatGoonbeeChatServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_isUsernameAvailable: (NSString *) username
{
  [outProtocol writeMessageBeginWithName: @"isUsernameAvailable" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"isUsernameAvailable_args"];
  if (username != nil)  {
    [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
    [outProtocol writeString: username];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_isUsernameAvailable
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatIsUsernameAvailable_result * result = [[[GBChatIsUsernameAvailable_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"isUsernameAvailable failed: unknown result"];
}

- (BOOL) isUsernameAvailable: (NSString *) username
{
  [self send_isUsernameAvailable : username];
  return [self recv_isUsernameAvailable];
}

- (void) send_registerUsername: (NSString *) userId username: (NSString *) username
{
  [outProtocol writeMessageBeginWithName: @"registerUsername" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerUsername_args"];
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (username != nil)  {
    [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
    [outProtocol writeString: username];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_registerUsername
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatRegisterUsername_result * result = [[[GBChatRegisterUsername_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"registerUsername failed: unknown result"];
}

- (NSString *) registerUsername: (NSString *) userId username: (NSString *) username
{
  [self send_registerUsername : userId username: username];
  return [self recv_registerUsername];
}

- (void) send_newChat: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions
{
  [outProtocol writeMessageBeginWithName: @"newChat" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"newChat_args"];
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (chatId != nil)  {
    [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: chatId];
    [outProtocol writeFieldEnd];
  }
  if (chatOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"chatOptions" type: TType_STRUCT fieldID: 3];
    [chatOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GBChatChat *) recv_newChat
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatNewChat_result * result = [[[GBChatNewChat_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"newChat failed: unknown result"];
}

- (GBChatChat *) newChat: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions
{
  [self send_newChat : userId chatId: chatId chatOptions: chatOptions];
  return [self recv_newChat];
}

- (void) send_chats: (int) sorting range: (GBChatRange *) range
{
  [outProtocol writeMessageBeginWithName: @"chats" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"chats_args"];
  [outProtocol writeFieldBeginWithName: @"sorting" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: sorting];
  [outProtocol writeFieldEnd];
  if (range != nil)  {
    [outProtocol writeFieldBeginWithName: @"range" type: TType_STRUCT fieldID: 2];
    [range write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_chats
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatChats_result * result = [[[GBChatChats_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"chats failed: unknown result"];
}

- (NSMutableArray *) chats: (int) sorting range: (GBChatRange *) range
{
  [self send_chats : sorting range: range];
  return [self recv_chats];
}

- (void) send_chat: (NSString *) userId chatId: (NSString *) chatId
{
  [outProtocol writeMessageBeginWithName: @"chat" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"chat_args"];
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (chatId != nil)  {
    [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: chatId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GBChatChat *) recv_chat
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatChat_result * result = [[[GBChatChat_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"chat failed: unknown result"];
}

- (GBChatChat *) chat: (NSString *) userId chatId: (NSString *) chatId
{
  [self send_chat : userId chatId: chatId];
  return [self recv_chat];
}

- (void) send_newMessage: (NSString *) userId chatId: (NSString *) chatId content: (NSString *) content
{
  [outProtocol writeMessageBeginWithName: @"newMessage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"newMessage_args"];
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (chatId != nil)  {
    [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: chatId];
    [outProtocol writeFieldEnd];
  }
  if (content != nil)  {
    [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 3];
    [outProtocol writeString: content];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_newMessage
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatNewMessage_result * result = [[[GBChatNewMessage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) newMessage: (NSString *) userId chatId: (NSString *) chatId content: (NSString *) content
{
  [self send_newMessage : userId chatId: chatId content: content];
  [self recv_newMessage];
}

- (void) send_messages: (NSString *) userId chatId: (NSString *) chatId range: (GBChatRange *) range
{
  [outProtocol writeMessageBeginWithName: @"messages" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"messages_args"];
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (chatId != nil)  {
    [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: chatId];
    [outProtocol writeFieldEnd];
  }
  if (range != nil)  {
    [outProtocol writeFieldBeginWithName: @"range" type: TType_STRUCT fieldID: 3];
    [range write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_messages
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatMessages_result * result = [[[GBChatMessages_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"messages failed: unknown result"];
}

- (NSMutableArray *) messages: (NSString *) userId chatId: (NSString *) chatId range: (GBChatRange *) range
{
  [self send_messages : userId chatId: chatId range: range];
  return [self recv_messages];
}

- (void) send_setChatOptions: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions
{
  [outProtocol writeMessageBeginWithName: @"setChatOptions" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setChatOptions_args"];
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (chatId != nil)  {
    [outProtocol writeFieldBeginWithName: @"chatId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: chatId];
    [outProtocol writeFieldEnd];
  }
  if (chatOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"chatOptions" type: TType_STRUCT fieldID: 3];
    [chatOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GBChatChat *) recv_setChatOptions
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatSetChatOptions_result * result = [[[GBChatSetChatOptions_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setChatOptions failed: unknown result"];
}

- (GBChatChat *) setChatOptions: (NSString *) userId chatId: (NSString *) chatId chatOptions: (GBChatChatOptions *) chatOptions
{
  [self send_setChatOptions : userId chatId: chatId chatOptions: chatOptions];
  return [self recv_setChatOptions];
}

- (void) send_globalUserCount
{
  [outProtocol writeMessageBeginWithName: @"globalUserCount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"globalUserCount_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_globalUserCount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBChatGlobalUserCount_result * result = [[[GBChatGlobalUserCount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"globalUserCount failed: unknown result"];
}

- (int32_t) globalUserCount
{
  [self send_globalUserCount];
  return [self recv_globalUserCount];
}

@end

@implementation GBChatGoonbeeChatServiceProcessor

- (id) initWithGoonbeeChatService: (id <GBChatGoonbeeChatService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_isUsernameAvailable_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"isUsernameAvailable"];
  }
  {
    SEL s = @selector(process_registerUsername_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"registerUsername"];
  }
  {
    SEL s = @selector(process_newChat_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"newChat"];
  }
  {
    SEL s = @selector(process_chats_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"chats"];
  }
  {
    SEL s = @selector(process_chat_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"chat"];
  }
  {
    SEL s = @selector(process_newMessage_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"newMessage"];
  }
  {
    SEL s = @selector(process_messages_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"messages"];
  }
  {
    SEL s = @selector(process_setChatOptions_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setChatOptions"];
  }
  {
    SEL s = @selector(process_globalUserCount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"globalUserCount"];
  }
  return self;
}

- (id<GBChatGoonbeeChatService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_isUsernameAvailable_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatisUsernameAvailable_args * args = [[GBChatisUsernameAvailable_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatIsUsernameAvailable_result * result = [[GBChatIsUsernameAvailable_result alloc] init];
  [result setSuccess: [mService isUsernameAvailable: [args username]]];
  [outProtocol writeMessageBeginWithName: @"isUsernameAvailable"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_registerUsername_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatregisterUsername_args * args = [[GBChatregisterUsername_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatRegisterUsername_result * result = [[GBChatRegisterUsername_result alloc] init];
  [result setSuccess: [mService registerUsername: [args userId] username: [args username]]];
  [outProtocol writeMessageBeginWithName: @"registerUsername"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_newChat_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatnewChat_args * args = [[GBChatnewChat_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatNewChat_result * result = [[GBChatNewChat_result alloc] init];
  [result setSuccess: [mService newChat: [args userId] chatId: [args chatId] chatOptions: [args chatOptions]]];
  [outProtocol writeMessageBeginWithName: @"newChat"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_chats_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatchats_args * args = [[GBChatchats_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatChats_result * result = [[GBChatChats_result alloc] init];
  [result setSuccess: [mService chats: [args sorting] range: [args range]]];
  [outProtocol writeMessageBeginWithName: @"chats"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_chat_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatchat_args * args = [[GBChatchat_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatChat_result * result = [[GBChatChat_result alloc] init];
  [result setSuccess: [mService chat: [args userId] chatId: [args chatId]]];
  [outProtocol writeMessageBeginWithName: @"chat"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_newMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatnewMessage_args * args = [[GBChatnewMessage_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatNewMessage_result * result = [[GBChatNewMessage_result alloc] init];
  [mService newMessage: [args userId] chatId: [args chatId] content: [args content]];
  [outProtocol writeMessageBeginWithName: @"newMessage"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_messages_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatmessages_args * args = [[GBChatmessages_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatMessages_result * result = [[GBChatMessages_result alloc] init];
  [result setSuccess: [mService messages: [args userId] chatId: [args chatId] range: [args range]]];
  [outProtocol writeMessageBeginWithName: @"messages"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_setChatOptions_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatsetChatOptions_args * args = [[GBChatsetChatOptions_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatSetChatOptions_result * result = [[GBChatSetChatOptions_result alloc] init];
  [result setSuccess: [mService setChatOptions: [args userId] chatId: [args chatId] chatOptions: [args chatOptions]]];
  [outProtocol writeMessageBeginWithName: @"setChatOptions"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_globalUserCount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBChatglobalUserCount_args * args = [[GBChatglobalUserCount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBChatGlobalUserCount_result * result = [[GBChatGlobalUserCount_result alloc] init];
  [result setSuccess: [mService globalUserCount]];
  [outProtocol writeMessageBeginWithName: @"globalUserCount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

